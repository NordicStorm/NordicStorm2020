// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package frc.robot.commands;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.controller.PIDController;
import frc.robot.Robot;

/**
 *
 */
public class TurnToAngle extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    double targetAngle;
    public TurnToAngle(double targetAngle) {
        this.targetAngle=targetAngle;
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.drivetrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    PIDController rotatePID;
    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
        double p=0.05;
        double i=0.001;
        double d=0;
        rotatePID=new PIDController(p, i, d);
         
        rotatePID.setTolerance(5);
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        double currAngle=Robot.drivetrain.getAngle();
        double turnVal=rotatePID.calculate(currAngle, targetAngle);
        double maxTurn=0.75;
        if(Math.abs(turnVal)>maxTurn){
            turnVal=Math.copySign(maxTurn, turnVal);
        }
        Robot.drivetrain.drive(0, -turnVal);
        System.out.println(turnVal);


    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
        //return rotatePID.atSetpoint();
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
        Robot.drivetrain.drive(0, 0);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
        end();
    }
}
