// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot.subsystems;

import frc.robot.commands.*;

import java.util.Collections;
import java.util.Date;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import edu.wpi.first.wpilibj.DigitalInput;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class BallIntake extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private WPI_TalonSRX stageOne;
    private WPI_TalonSRX stageTwo;
    private WPI_TalonSRX stageThree;
    private WPI_TalonSRX stageFour;
    private WPI_TalonSRX stageFive;
    private DigitalInput sensorOne;
    private DigitalInput sensorTwo;
    private DigitalInput sensorThree;
    private DigitalInput sensorFour;
    private DigitalInput sensorFive;
    private WPI_TalonSRX kicker;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    WPI_TalonSRX[] stageMotors = new WPI_TalonSRX[5];
    DigitalInput[] stageSensors = new DigitalInput[5];
    long[] timeToStopStageBeingMovedTo = new long[5];
    long[] timeToStopStageBeingMovedFrom = new long[5];

    double moveSpeed = 1;
    int moveTime = 600;
    int sensorMoveTime = 100;

    int shooterFeedTime = 600;

    boolean intakeRunning = false;

    public BallIntake() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        stageOne = new WPI_TalonSRX(5);

        stageTwo = new WPI_TalonSRX(6);

        stageThree = new WPI_TalonSRX(7);

        stageFour = new WPI_TalonSRX(8);

        stageFive = new WPI_TalonSRX(9);

        sensorOne = new DigitalInput(0);
        addChild("SensorOne", sensorOne);

        sensorTwo = new DigitalInput(1);
        addChild("SensorTwo", sensorTwo);

        sensorThree = new DigitalInput(2);
        addChild("SensorThree", sensorThree);

        sensorFour = new DigitalInput(3);
        addChild("SensorFour", sensorFour);

        sensorFive = new DigitalInput(4);
        addChild("SensorFive", sensorFive);

        kicker = new WPI_TalonSRX(11);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        stageMotors[0] = stageOne;
        stageMotors[1] = stageTwo;
        stageMotors[2] = stageThree;
        stageMotors[3] = stageFour;
        stageMotors[4] = stageFive;

        stageSensors[0] = sensorOne;
        stageSensors[1] = sensorTwo;
        stageSensors[2] = sensorThree;
        stageSensors[3] = sensorFour;
        stageSensors[4] = sensorFive;
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop
        runBallsThroughSystem();
        // System.out.println("stage"+stageSensors[0].get());

    }

    private void runBallsThroughSystem() {
        boolean[] stageCanBeMovedInto = new boolean[] { false, false, false, false, false };
        long now = System.currentTimeMillis();

        stageCanBeMovedInto[4] = !stageSensors[4].get();
        for (int i = stageMotors.length - 2; i < 0; i--) {// -2 because top stage never moves (except for shooting)
            boolean runStageMotor = false;
            DigitalInput thisStageSensor = stageSensors[i];
            boolean isOccupied = thisStageSensor.get();
            long timeLeftToMoveFrom = now - timeToStopStageBeingMovedFrom[i];
            long timeLeftToMoveTo = now - timeToStopStageBeingMovedFrom[i];

            if (timeLeftToMoveFrom > 0 || timeLeftToMoveTo > 0) {
                runStageMotor = true;
                if (timeLeftToMoveTo <= sensorMoveTime) {
                    if (isOccupied || timeLeftToMoveTo < 0) { // if the ball has gotten here, tell the previous stage
                                                              // and this one to stop
                        timeToStopStageBeingMovedFrom[i - 1] = 0;
                        timeToStopStageBeingMovedTo[i] = 0;
                    }
                }
            } else {
                boolean isAvailable = false;
                if (isOccupied) {
                    if (stageCanBeMovedInto[i + 1]) {
                        isAvailable = true;

                        if (timeToStopStageBeingMovedFrom[i] == 0) {

                            timeToStopStageBeingMovedFrom[i] = now + moveTime;
                            timeToStopStageBeingMovedTo[i + 1] = now + moveTime;
                            runStageMotor = true;
                            // set both this stage and the next stage moving, as the ball transfers
                        }
                    } else {
                        isAvailable = false;
                    }
                } else {
                    isAvailable = true;
                    if (i == 0) {
                        if (intakeRunning) {
                            runStageMotor = true;
                        }
                    }

                }
                stageCanBeMovedInto[i] = isAvailable;

            }
            WPI_TalonSRX stageMotor = stageMotors[i];
            if (runStageMotor) {
                stageMotor.set(moveSpeed);
            } else {
                stageMotor.set(0);
            }
            System.out.println(stageCanBeMovedInto);
            

        }
    }

    public void setIntakeRunning(boolean runIntake) {
        intakeRunning = runIntake;
    }

    public void setRawMotors(double a, double b, double c, double d, double e, double f) {
        stageMotors[0].set(a);
        stageMotors[1].set(b);
        stageMotors[2].set(c);
        stageMotors[3].set(d);
        stageMotors[4].set(e);
        kicker.set(f);

        if (a > 0.1 || b > 0.1 || c > 0.1 || d > 0.1 || e > 0.1 || f > 0.1) {
            System.out.println(System.currentTimeMillis());
        } else {
            System.out.println(0);
        }
    }

    /**
     * 
     * @return True if the ball was sucessfully fed up, false if it was not due to
     *         lack of ball or already-running feeder
     */
    public boolean feedBallToShooter() {
        if (isBallAvailableToShoot()) {
            timeToStopStageBeingMovedFrom[4] = System.currentTimeMillis() + shooterFeedTime;
            return true;
        }
        return false;
    }

    public boolean isBallAvailableToShoot() {
        if (!stageSensors[4].get()) {
            return false;
        }

        boolean lastStageRunning = timeToStopStageBeingMovedFrom[4] > 0 || timeToStopStageBeingMovedTo[4] > 0;
        return lastStageRunning;
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}
