
// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot.commands;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.InstantCommand;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import frc.robot.Robot;
import frc.robot.subsystems.Drivetrain;

/**
 *
 */
public class SetShooterTargeting extends PathSection {

   
    
    
    boolean headingSeek;
    double headingVal;
    boolean targetSeek;
    int offset;
    
    public SetShooterTargeting(boolean headingSeek, double headingVal, boolean targetSeek, int offset) {
        this.headingSeek=headingSeek;
        this.headingVal=headingVal;
        this.targetSeek=targetSeek;
        this.offset=offset;
        requires(Robot.shooter);

    }

    @Override
    protected void initialize() {
        Robot.shooter.setAutoSeekHeading(headingSeek, headingVal);
        Robot.shooter.setAutoTargetSeek(targetSeek, offset);
        Robot.shooter.setAutoAdjustValues(false);
        

    }
    // Called repeatedly when this Command is scheduled to run
    
    
    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return true;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
        Robot.shooter.setAutoAdjustValues(false);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
        end();
    }

    @Override
    public double getRequestedStartSpeed() {
        return 0;
    }

    @Override
    public double getProvidedEndSpeed() {
        return 0;
    }

    @Override
    public double modifyAngle(double oldAngle) {
        return 0;
    }

    @Override
    public void finalizeForPath(PathSection previous, PathSection next) {
        
    }
    @Override
    public boolean isPassive(){
        return true;
    }

    
}
