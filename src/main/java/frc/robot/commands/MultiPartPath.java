
// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot.commands;

import java.util.ArrayList;
import java.util.List;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.CommandGroup;
import frc.robot.Robot;

/**
 *
 */
public class MultiPartPath extends CommandGroup {

    boolean hasFinalized=false;
    double startingAngle;
    List<PathSection> sections = new ArrayList<>();
    /**
     * Used for multi step movements, keeping speeds good.
     * @param startingAngle what angle the robot is at at the start of the path.
     * It does not turn to there, it is just used for information.
     */
    public MultiPartPath(double startingAngle) {
        this.startingAngle=startingAngle;
        sections.add(new StopMovement());//start path stopped
        requires(Robot.drivetrain);

    }
     /**
     * Add a straight segment to the path
     * @param distance distance in feet
     * @param speed speed%. Between -1-1. Negative means backward
     * @param partOfPath If false, use normal p-val based on given speed. If true, use p-val while targeting surrounding segments.
     */
    public MultiPartPath addStraight(double distance, double speed){
        sections.add(new DriveDistancePath(distance*913, speed));
        return this;
    }
    /**
     * Drive in an arc to an angle. 
     * @param targetAngle target angle
     * @param turnRadius turn radius in feet. Measured from the center of the robot towards the center of the arc.
     * @param speed speed. -1 to 1. 
     * @param arcRight Affects to which side the robot will arc.
     * If true, will arc to the right, if false it will go left.
     */
    public MultiPartPath addArc(double targetAngle, double turnRadius, double speed, boolean arcRight){
        sections.add(new DriveArcPath(targetAngle, turnRadius, speed, arcRight));
        return this;
    }
    /**
     * Finalize and calculate speeds for path segments. Must be called before execution.
     * @return this same path for chaining
     */
    public MultiPartPath finalizePath(){
        double currentAngle=startingAngle;
        sections.add(new StopMovement()); // add stop at end for calculations of speed
        for(PathSection section : sections){
            currentAngle=section.modifyAngle(currentAngle);
        }
        for(int i=1; i<sections.size()-1; i++){//iterate over all except first and last (the stops)
            sections.get(i).finalizeForPath(sections.get(i-1), sections.get(i+1));
        }
        for(PathSection section : sections){
            addSequential(section);
        }
        this.hasFinalized=true;
        return this;
    }
    @Override
    protected void initialize() {
        if(!hasFinalized){
            throw new IllegalStateException("Path has not been finalized!");
        }
    }
    
    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        
    }
    
    
    

    // Called once after isFinished returns true
    @Override
    protected void end() {
        
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
        end();
    }
}
