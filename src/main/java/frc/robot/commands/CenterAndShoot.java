// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package frc.robot.commands;
import edu.wpi.first.wpilibj.command.Command;
import frc.robot.Robot;
import edu.wpi.first.wpilibj.controller.PIDController;

/**
 *
 */
public class CenterAndShoot extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public CenterAndShoot() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    PIDController pivotController;
    @Override
    protected void initialize() {
        double p=0.01;
        double i=0.01;
        double d=0;
        pivotController=new PIDController(p, i, d);
        //pivotController.set
    }


    double camWidth=320;
    double offset=-13;
    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        double target=(camWidth/2)+offset;
        double xOfTarget=Robot.shooter.getVisionXValue();

        double turnValue = pivotController.calculate(xOfTarget, target);
        System.out.println("turnval"+turnValue);
        Robot.shooter.setPivotPower(-turnValue);

        /*if(xError<10){
            if(Robot.shooter.isReadyToShoot()){
                Robot.ballIntake.feedBallToShooter();
            }
        }*/
        
        
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
        Robot.shooter.setPivotPower(0);

    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
        Robot.shooter.setPivotPower(0);

    }
}
