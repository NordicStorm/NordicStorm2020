// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package frc.robot.commands;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.controller.PIDController;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import frc.robot.Robot;
import frc.robot.subsystems.Drivetrain;

/**
 *
 */
public class StopMovement extends PathSection {


    /**
     * Stops drive motors and waits until forward velocity and angular velocity have stopped.
     */
    public StopMovement() {

    }

    @Override
    protected void initialize() {
        SmartDashboard.putString("currentCommand", "stopMovement()");

        Robot.drivetrain.setEncMode(true);
        Robot.drivetrain.setOutsideControl(false);
        Robot.drivetrain.setSuperPMode(true);

    }
    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        Robot.drivetrain.drive(0, 0);
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        System.out.println("rotvel:"+Robot.drivetrain.getRotationalVelocity());
        boolean done=Math.abs(Robot.drivetrain.getRotationalVelocity())<5
         && Math.abs(Robot.drivetrain.getLeftEncoderVelocity())<12
         && Math.abs(Robot.drivetrain.getRightEncoderVelocity())<12;
        return done;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
        Robot.drivetrain.setSuperPMode(false);
        Robot.drivetrain.drive(0, 0);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
        end();
    }

    @Override
    public double getRequestedStartSpeed() {
        return 0;
    }
    @Override
    public double getProvidedEndSpeed() {
        return 0;
    }

    @Override
    public void finalizeForPath(PathSection previous, PathSection next) {
    }
    @Override
    public double modifyAngle(double oldAngle) {
        return oldAngle;
    }
    
}
